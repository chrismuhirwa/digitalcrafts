-- Small
-- Numbers
-- Let's write some functions that 1) create a variable and 2) return it

-- 1. myNum
-- Define a function called makeANumber().
    function makeaNumber() {
        myNum = "1" ????????
        return myNum;
    }

-- Declare a variable myNum and assign any number to it, then return myNum.

-- NOTE: myNum can be any valid JavaScript number

-- 2. myInt
-- Define a function called makeAnInteger().
    function makeAnInteger(){
        const myInt = 32;
        return myInt;
    }

-- Declare a variable myInt and assign an integer to it, then return myInt.

-- 3. myFloat
-- Define a function called makeAFloat.
    function makeAFloat (){
        const myFloat = 2.544;
        return myFloat;
    }

-- Declare a variable myFloat and assign a floating point number to it, then return myFloat.

-- 4. zilch
-- Define a function called makeZero().
    function makeZero(){
        var zilch = 0;
        return zilch;
    }

-- Declare a variable zilch and assign the number 0 to it, then return zilch.

-- Let's continue with variable declaration and making more simple types.

-- 5. makeNothing()
-- Define a function called makeNothing(). Declare a variable huh and assign nothing to it, then return huh.
    function makeNothing()
        var huh =  ; ???????????
        return huh;

-- NOTE: the value undefined means "lack of assignment", which is what this function should return.

-- 6. makeBoolen()
-- Define a function called makeBoolean(). Declare a variable myBool and assign it either true or false, then return myBool.
    function makeBoolean() {
        var myBool =  ??????????/
        return myBool;
    }

-- NOTE: remember that the string "true" (surrounded by quotes) is not the same thing as boolean true (no quotes).

-- 7. makeTrue()
-- Define a function called makeTrue(). Declare a variable yep and assign boolean true, then return yep.
    function makeTrue(){
        const yep = true;
        return yep;
    }


-- 8. makeFalse()
-- Define a function called makeFalse(). Declare a variable nope and assign boolean false, then return nope.
    function makeFalse(){
        const nope = false;
        return nope;
    }


-- 9. makeNull()
-- Define a function called makeNull(). Declare a variable nothingMuch and assign null to it, then return nothingMuch.
    function makeNull(){
        const nothingMuch = null;
        return nothingMuch;
    }


-- Strings
-- Let's venture into JavaScript strings in these exercises. Hold onto your hats: we will be using functions with parameters here too!

-- 10. helloWorld()
-- Define a function called helloWorld(). Return the string "Hello, world!".
    function helloWorld("Hello,world!"){
        return helloWorld;     ????????????????????????
    }

-- 11. helloName()
-- Define a function called helloName() that accepts 1 parameter (arity of 1). Use the symbol "name" for the parameter name.
    function helloName(arity of 1) ???????


-- Return the string "Hello, <name>!" where <name> is the value passed to the function.

-- 12. abstractLength()
-- Return the length of the string "tarPitAbstract" defined below. You may copy and paste the code into your text editor.

-- HINT: Use the .length propertyLinks to an external site.

function abstractLength() {
  const tarPitAbstract = 'Complexity is the single major difficulty in the successful development of large-scale software systems. ' +
    'Following Brooks we distinguish accidental from essential difficulty, but disagree with his premise that most complexity remaining in contemporary systems is essential. ' +
    'We identify common causes of complexity and discuss general approaches which can be taken to eliminate them where they are accidental in nature. ' +
    'To make things more concrete we then give an outline for a potential complexity-minimizing approach based on functional programming and Coddâ€™s relational model of data.'
      return tarPitAbstract.length;
}

-- 13. makeLoud()
-- Modify the following function, returning the string chorus in all capital letters.

-- HINT: use the .toUpperCase method Links to an external site. //

function makeLoud() { const chorus = 'Who let the dogs out?'; return makeLoud.toUpperCase;} 

-- 14. makeQuiet()
-- In the following makeQuiet() function, assume that a string is passed as the parameter str.

-- Return the value of str in all lower case letters.

-- HINT: use the .toLowerCase methodLinks to an external site.

function makeQuiet(str) {
    return str.toLowerCase; ????????
}

-- Math
-- Let's do some grade-school math. Actually: let's have the computer do the math for us 

-- 15. add99()
-- Create a function called add99() that takes one argument and adds the number 99 to it.
function add99() ??????????


-- 16. add()
-- Create a function add() that takes 2 arguments and sums them together.
function add(4 + 5){
    return (4 + 5) ??????????
}

-- 17. subtract()
-- Create a function subtract() that takes 2 number arguments and returns their difference (i.e., the second number substracted from the first number).
    function subtract(2,1){
        return 2-1 ;
    }


-- 18. multiply()
-- Create a function multiply() that takes 2 number arguments and returns their product.
    function multiply(2,3){
        return 2 * 3;
    }

-- 19. divide()
-- Create a function divide() that takes 2 number arguments. Divide the first argument by the second and return the result.
    function divide (4,2){
        return 4/2 ;
    }

-- 20. mod()
-- The modulus operator (%) finds the remainder from division.

-- Create a function mod() that takes 2 number arguments and returns the remainder of the first divided by the second.
    function mod(6,3){
        return 6 % 3;
    }

-- Arrays
-- Arrays Links to an external site. are ordered lists of values. You use them all the time in programming.

-- 21. threeFruits()
-- You can create an Array using the [] characters, with commas separating the individual values.

-- Define a function called threeFruits(). Declare a fruits variable whose value is the Array ['Apple', 'Banana', 'Cherry']

-- Return the array of fruit strings.

function threeFruits() {
    const fruits = ['Apple', 'Banana', 'Cherry']
    return fruits;
}


-- 22. multipleTypes()
-- An Array can contain multiple types. ie: strings, numbers, boolean, etc.

-- Define a function called multipleTypes(). Declare a diverseArray variable whose value is the Array ['Skateboard', null, 8.75, 'Eiffel Tower', 44, 7, true, null].

-- Return the array of values.

function multipleTypes(){
    const diverseArray = ['Skateboard', null, 8.75, 'Eiffel Tower', 44, 7, true, null]
    return diverseArray;
}


-- 23. indexAccess()
-- You can access individual values of an array using bracket notation shown below. Remember that arrays start at index 0. So for an array myArray the first item can be accessed at myArray[0].

-- Define a function called indexAccess(). In the function, create a people array with the names of 6 people. (These names should be strings!)

-- Return the third item from the people array.

function indexAccess(){
    const people = ["chris","james","brian","mary","mario","juan"];
    return people[2];
}

-- 24. useLength()
-- Define a function called useLength(). In the function, create an arr array that contains the strings 'a', 'b', and 'c'. Return the length of the array Links to an external site..
function useLength(){
    const arr = ["a","b","c"];
    return arr.length;
}
-- 25. usePush()
-- Define a function called usePush() with an arr variable. arr should be an array that contains the strings 'a', 'b', and 'c'.

-- Add the string 'd' to the end of an array using the .push() method Links to an external site..

-- Then return the array.
function usePush(){
    const arr = ["a","b","c"];
     arr.push("d");
    return arr;
}
-- 26. useIndexOf()
-- You can search an array for an item using the .indexOf() method Links to an external site.. This method accepts a value as an argument.

-- It returns either:

-- the first index of an item that matches the argument
-- or -1 if there are no matching items
-- Create a function called useIndexOf() with an array arr. The array should hold the values 'C', 'A', 'G', 'T', 'A', 'A', 'G', 'T'.

-- Return the index of 'T'.
function useIndexOf(){
    const arr = ["C","A","G","T","A","A","G","T"];
    return arr.indexOf("T");

}

-- 27. useJoin()
-- You can convert an Array into a string using the .join() method Links to an external site..

-- Define a useJoin() function with an array containing the strings 'a', 'b', 'c', 'd', 'e', 'f'.

-- Return the string 'a-b-c-d-e-f'.
 function useJoin(){
    const arr = ["a","b","c","d","e","f"];
    return arr.join("a-b-c-d-e-f"); ??????????
 }
Objects
// Objects are collections of key/value pairs. You use them all the time in programming.
//
// Useful reference:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// You can create an Object using the {} characters.
// Note the commas between the items.
// Return the object of numbers in the function below.

function threeNumbers () {
  const numbers = { numberOne: 1, numberTwo: 2, numberThree: 3 }

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// An Object can contain any type for each property. ie: strings, numbers, boolean, etc
// Return the object of values in the function below.

function manyTypes () {
  const diverseObject = { name: 'banana', count: 42, isDelicious: true }

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// You can access individual values of an object using bracket notation shown below.
// This allows you to write the label (key) assigned to the value and get the value back.
// All Object keys are strings.
// Return the name of the bestFruit Object below.

function keyAccess () {
  const bestFruit = { name: 'banana', count: 42, isDelicious: true }

  // console.assert() allows you to declare things that should be true; it's like
  // a sanity-check for your code.
  // Here we are confirming that object access works like we expect:
  console.assert(bestFruit['name'] === 'banana')
  console.assert(bestFruit['count'] === 42)
  console.assert(bestFruit['isDelicious'] === true)

  // return the name of the bestFruit Object here.

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// You can add properties to an Object by assigning a value to a new key.
// Add the property 'color' and assign it the string 'yellow' in the bestFruit object below.
// Then return the object.

function addKey () {
  const bestFruit = { name: 'banana', count: 42 }

  // Note that before a key is assigned it will always return `undefined`
  console.assert(bestFruit['isDelicious'] === undefined)
  bestFruit['isDelicious'] = true
  console.assert(bestFruit['isDelicious'] === true)

  // Assign 'yellow' to the key 'color' of bestFruit here and return bestFruit

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// When an Object gets large, it is normal to define its properties one-per-line as shown below.
// Create your own object named bootcampStudent and give it 8 properties similar to
// the bootcampInstructor object.
// Return your bootcampStudent object.

function largeObject () {
  const bootcampInstructor = {
    name: 'Susan',
    email: 'susan@bootcamp.digitalcrafts',
    age: 32,
    heightFeet: 5.5,
    favoriteColor: 'green',
    homeTown: 'Houston',
    pet: 'cat',
    ownsCar: true
  }

  // create a bootcampStudent object here similar to bootcampInstructor and return it

  function largeObject(){
    const bootcampStudent = {
        name:"Daniel",
        email: "daniel@bootcamp.digitacrafts",
        age: 20,
        heightFeet: 5.9,
        favoriteColor: "red",
        homeTown: "Houston"
        pet: "dog"
        ownsCar: false

        return bootcampStudent; ???????
    }
  }

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Objects aren't restricted to containing only JavaScript primitive types.
// Remember, JavaScript primitive types include string, number, boolean, null...
// Here is an object which contains a nested array.
// Return the second item in the array favoriteFoods.

function nestedArray () {
  const bootcampInstructor = {
    name: 'Susan',
    favoriteColor: 'green',
    favoriteFoods: [
      'chicken pot pie',
      'salmon',
      'pho'
    ]

    console.assert(bootcampInstructor['favoriteFoods'][2] === 'pho') ?????????????
  }

  // Note that you can chain the bracket notation to reach into the Object AND into the Array.
  console.assert(bootcampInstructor['favoriteFoods'][0] === 'chicken pot pie')

  // Return the second item of the nested array favoriteFoods

}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// When working with Objects, it is most common to use the dot notation to access properties.
// Bracket notation is more flexible, but dot notation is a more convenient, readable syntax.
// Useful Reference:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors
//
// Return the name of the bootcampInstructor Object below

function dotNotation () {
  const bootcampInstructor = {
    name: 'Susan',
    favoriteColor: 'green',
    favoriteFoods: [
      'chicken pot pie',
      'salmon',
      'pho'
    ]
    console.assert(bootcampInstructor.name === 'Susan')??????????
  }

  // Some examples of using dot notation vs bracket notation:
  console.assert(bootcampInstructor.name === 'Susan')
  console.assert(bootcampInstructor['name'] === 'Susan')
  const nameString = 'name'
  console.assert(bootcampInstructor[nameString] === 'Susan')

  console.assert(bootcampInstructor.favoriteColor === 'green')
  console.assert(bootcampInstructor['favoriteColor'] === 'green')
  console.assert(bootcampInstructor['favorite' + 'Color'] === 'green')

  console.assert(bootcampInstructor['favoriteFoods'][0] === 'chicken pot pie')
  console.assert(bootcampInstructor.favoriteFoods[0] === 'chicken pot pie')

  // Return the name of the bootcampInstructor Object using dot notation

}
